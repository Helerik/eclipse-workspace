import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.script.*;

public class GUI extends JFrame{
	
	private FlowLayout layout;
	
	private JTextField display;
	
	private JButton nine;
	private JButton eight;
	private JButton seven;
	private JButton six;
	private JButton five;
	private JButton four;
	private JButton three;
	private JButton two;
	private JButton one;
	private JButton zero;
	
	private JButton lparenthesis;
	private JButton rparenthesis;
	private JButton dot;
	
	private JButton clear;
	private JButton backspace;
	
	private JButton plus;
	private JButton minus;
	private JButton mult;
	private JButton div;
	private JButton equal;
	
	public GUI(){
		super("Calculator");
		
		layout = new FlowLayout();
		layout.setAlignment(FlowLayout.CENTER);
		setLayout(layout);
		
		display = new JTextField(30);
		display.setEditable(false);
		add(display);
		
		nine = new JButton("9");
		add(nine);
		nine.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) {
					display.setText(display.getText() + "9");
				}
			}
		);
		
		eight = new JButton("8");
		add(eight);
		eight.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) {
					display.setText(display.getText() + "8");
				}
			}
		);
		
		seven = new JButton("7");
		add(seven);
		seven.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) {
					display.setText(display.getText() + "7");
				}
			}
		);
		
		six = new JButton("6");
		add(six);
		six.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) {
					display.setText(display.getText() + "6");
				}
			}
		);
		
		five = new JButton("5");
		add(five);
		five.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) {
					display.setText(display.getText() + "5");
				}
			}
		);
		
		four = new JButton("4");
		add(four);
		four.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) {
					display.setText(display.getText() + "4");
				}
			}
		);
		
		three = new JButton("3");
		add(three);
		three.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) {
					display.setText(display.getText() + "3");
				}
			}
		);
		
		two = new JButton("2");
		add(two);
		two.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) {
					display.setText(display.getText() + "2");
				}
			}
		);
		
		one = new JButton("1");
		add(one);
		one.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) {
					display.setText(display.getText() + "1");
				}
			}
		);
		
		zero = new JButton("0");
		add(zero);
		zero.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) {
					display.setText(display.getText() + "0");
				}
			}
		);
		
		lparenthesis = new JButton("(");
		add(lparenthesis);
		lparenthesis.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) {
					display.setText(display.getText() + "(");
				}
			}
		);
		
		rparenthesis = new JButton(")");
		add(rparenthesis);
		rparenthesis.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) {
					display.setText(display.getText() + ")");
				}
			}
		);
		
		dot = new JButton(".");
		add(dot);
		dot.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) {
					display.setText(display.getText() + ".");
				}
			}
		);
		
		clear = new JButton("C");
		add(clear);
		clear.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) {
					display.setText("");
				}
			}
		);
		
		backspace = new JButton("<--");
		add(backspace);
		backspace.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) {
					display.setText(display.getText().substring(0,display.getText().length()-1));
				}
			}
		);
		
		plus = new JButton("+");
		add(plus);
		plus.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) {
					display.setText(display.getText() + "+");
				}
			}
		);
		
		minus = new JButton("-");
		add(minus);
		minus.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) {
					display.setText(display.getText() + "-");
				}
			}
		);
		
		mult = new JButton("*");
		add(mult);
		mult.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) {
					display.setText(display.getText() + "*");
				}
			}
		);
		
		div = new JButton("/");
		add(div);
		div.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) {
					display.setText(display.getText() + "/");
				}
			}
		);
		
		equal = new JButton("=");
		add(equal);
		equal.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) {
					String text = display.getText();
					try {
						text = (String.valueOf(eval(text)));
					}
					catch(Exception some_error) {
				    	text = "ERROR";
					}
					display.setText(text);
				}
			}
		);

		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		setSize(360,400);
		setVisible(true);
	}
	
	public static double eval(final String str) {
	    return new Object() {
	        int pos = -1, ch;

	        void nextChar() {
	            ch = (++pos < str.length()) ? str.charAt(pos) : -1;
	        }

	        boolean eat(int charToEat) {
	            while (ch == ' ') nextChar();
	            if (ch == charToEat) {
	                nextChar();
	                return true;
	            }
	            return false;
	        }

	        double parse() {
	            nextChar();
	            double x = parseExpression();
	            if (pos < str.length()) throw new RuntimeException("Unexpected: " + (char)ch);
	            return x;
	        }

	        // Grammar:
	        // expression = term | expression `+` term | expression `-` term
	        // term = factor | term `*` factor | term `/` factor
	        // factor = `+` factor | `-` factor | `(` expression `)`
	        //        | number | functionName factor | factor `^` factor

	        double parseExpression() {
	            double x = parseTerm();
	            for (;;) {
	                if      (eat('+')) x += parseTerm(); // addition
	                else if (eat('-')) x -= parseTerm(); // subtraction
	                else return x;
	            }
	        }

	        double parseTerm() {
	            double x = parseFactor();
	            for (;;) {
	                if      (eat('*')) x *= parseFactor(); // multiplication
	                else if (eat('/')) x /= parseFactor(); // division
	                else return x;
	            }
	        }

	        double parseFactor() {
	            if (eat('+')) return parseFactor(); // unary plus
	            if (eat('-')) return -parseFactor(); // unary minus

	            double x;
	            int startPos = this.pos;
	            if (eat('(')) { // parentheses
	                x = parseExpression();
	                eat(')');
	            } else if ((ch >= '0' && ch <= '9') || ch == '.') { // numbers
	                while ((ch >= '0' && ch <= '9') || ch == '.') nextChar();
	                x = Double.parseDouble(str.substring(startPos, this.pos));
	            } else if (ch >= 'a' && ch <= 'z') { // functions
	                while (ch >= 'a' && ch <= 'z') nextChar();
	                String func = str.substring(startPos, this.pos);
	                x = parseFactor();
	                if (func.equals("sqrt")) x = Math.sqrt(x);
	                else if (func.equals("sin")) x = Math.sin(Math.toRadians(x));
	                else if (func.equals("cos")) x = Math.cos(Math.toRadians(x));
	                else if (func.equals("tan")) x = Math.tan(Math.toRadians(x));
	                else throw new RuntimeException("Unknown function: " + func);
	            } else {
	                throw new RuntimeException("Unexpected: " + (char)ch);
	            }

	            if (eat('^')) x = Math.pow(x, parseFactor()); // exponentiation

	            return x;
	        }
	    }.parse();
	}
	

}





